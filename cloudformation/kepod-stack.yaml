AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  RoleArn:
    Type: String
    Default: "arn:aws:iam::868610198161:role/LabRole"
Resources:
  # VPC for the EKS cluster
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: kepod-vpc
  # Public Subnets
  # These subnets are used for the NAT Gateway and public facing resources
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.1.0/24"
      AvailabilityZone: "us-east-1a"
      Tags:
        - Key: Name
          Value: kepod-public-subnet-1
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.2.0/24"
      AvailabilityZone: "us-east-1b"
      Tags:
        - Key: Name
          Value: kepod-public-subnet-2
  # Private Subnets
  # These subnets are used for the EKS cluster nodes and other private resources and access the internet through the NAT Gateway
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.3.0/24"
      AvailabilityZone: "us-east-1a"
      Tags:
        - Key: Name
          Value: kepod-private-subnet-1
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.4.0/24"
      AvailabilityZone: "us-east-1b"
      Tags:
        - Key: Name
          Value: kepod-private-subnet-2
  # Internet Gateway
  # This is used to allow the public subnets to access the internet and for the NAT Gateway to access the internet
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  # Public Route Table
  # This route table is used for the public subnets and NAT Gateway to route traffic to the internet through the Internet Gateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  # NAT Gateway (in Public Subnet)
  ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnet1
      AllocationId: !GetAtt ElasticIP.AllocationId
  # Private Route Table
  # This route table is used for the private subnets to route traffic through the NAT Gateway
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NatGateway
  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable
  # Security Group for EKS Cluster
  # This security group allows traffic on ports 3000, 8080, and 443 for the KEPOD API and WebSocket connections
  EKSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: "Security group for KEPOD EKS cluster"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: "10.0.0.0/16"
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 65535
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: kepod-eks-sg
  # EKS Cluster
  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: kepod-cluster
      RoleArn: !Ref RoleArn
      ResourcesVpcConfig:
        SubnetIds:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds:
          - !Ref EKSSecurityGroup
  # EKS Node Group 
  # This node group is created in private subnets for security reasons and the nodes can access the internet through the NAT Gateway
  NodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodegroupName: kepod-nodegroup
      NodeRole: !Ref RoleArn
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      InstanceTypes:
        - t3.small
      ScalingConfig:
        MinSize: 1
        MaxSize: 2
        DesiredSize: 1
      Tags:
        Name: kepod-nodes
  # ECR Repository for KEPOD API
  ECRRepositoryApi:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: kepod-api
  # ECR Repository for Provisioner
  ECRRepositoryProvisioner:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: kepod-provisioner
  # DynamoDB table for storing environment data
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: kepod-environments
      AttributeDefinitions:
        - AttributeName: env_id
          AttributeType: S
      KeySchema:
        - AttributeName: env_id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  # SQS Queue for provisioning requests
  SQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: kepod-provisioning-queue
  # S3 Bucket for Logs
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub kepod-logs-${AWS::AccountId}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
  # CloudWatch Dashboard for monitoring
  # This dashboard includes metrics for EKS cluster, DynamoDB, SQS, and S3
  CloudWatchDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: kepod-dashboard
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/EKS", "cluster_failed_node_count", "ClusterName", "${EKSCluster}" ],
                  [ ".", "cluster_node_count", ".", "." ]
                ],
                "period": 300,
                "stat": "Average",
                "region": "us-east-1",
                "title": "EKS Cluster Node Status"
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/DynamoDB", "ConsumedReadCapacityUnits", "TableName", "${DynamoDBTable}" ],
                  [ ".", "ConsumedWriteCapacityUnits", ".", "." ]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "us-east-1",
                "title": "DynamoDB Consumed Capacity"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/SQS", "NumberOfMessagesSent", "QueueName", "${SQSQueue}" ],
                  [ ".", "NumberOfMessagesReceived", ".", "." ],
                  [ ".", "ApproximateNumberOfMessagesVisible", ".", "." ]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "us-east-1",
                "title": "SQS Queue Metrics"
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/NetworkELB", "HealthyHostCount", "LoadBalancer", "net/kepod" ],
                  [ ".", "UnHealthyHostCount", ".", "." ]
                ],
                "period": 300,
                "stat": "Average",
                "region": "us-east-1",
                "title": "Load Balancer Health"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 12,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/S3", "BucketSizeBytes", "BucketName", "${S3Bucket}", { "stat": "Average" } ],
                  [ ".", "NumberOfObjects", ".", "." ]
                ],
                "period": 86400,
                "stat": "Average",
                "region": "us-east-1",
                "title": "S3 Bucket Metrics"
              }
            }
          ]
        }
  # CloudWatch Alarms
  # These alarms are used to monitor the EKS cluster, DynamoDB, and SQS queue
  EKSNodeCountAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: kepod-eks-node-count-alarm
      AlarmDescription: Alarm when EKS node count is below minimum threshold
      MetricName: cluster_node_count
      Namespace: AWS/EKS
      Dimensions:
        - Name: ClusterName
          Value: !Ref EKSCluster
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: LessThanThreshold
  DynamoDBHighConsumedReadCapacityAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: kepod-dynamodb-read-capacity-alarm
      AlarmDescription: Alarm when DynamoDB consumed read capacity is high
      MetricName: ConsumedReadCapacityUnits
      Namespace: AWS/DynamoDB
      Dimensions:
        - Name: TableName
          Value: !Ref DynamoDBTable
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 240  # 80% of provisioned capacity
      ComparisonOperator: GreaterThanThreshold
  SQSQueueDepthAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: kepod-sqs-queue-depth-alarm
      AlarmDescription: Alarm when SQS queue has too many messages
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Dimensions:
        - Name: QueueName
          Value: !Ref SQSQueue
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 100
      ComparisonOperator: GreaterThanThreshold
  # CloudWatch Log Groups
  # These log groups are used to store logs from the EKS cluster, API, and Provisioner
  EKSClusterLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/eks/${EKSCluster}/cluster"
      RetentionInDays: 7
  ApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /kepod/api
      RetentionInDays: 7
  ProvisionerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /kepod/provisioner
      RetentionInDays: 7
Outputs:
  ClusterName:
    Value: !Ref EKSCluster
  VpcId:
    Value: !Ref VPC
  SecurityGroupId:
    Value: !Ref EKSSecurityGroup
  ECRRepositoryApiUri:
    Value: !GetAtt ECRRepositoryApi.RepositoryUri
  ECRRepositoryProvisionerUri:
    Value: !GetAtt ECRRepositoryProvisioner.RepositoryUri
  DynamoDBTableArn:
    Value: !GetAtt DynamoDBTable.Arn
  SQSQueueUrl:
    Value: !Ref SQSQueue
  S3BucketName:
    Value: !Ref S3Bucket
  CloudWatchDashboardUrl:
    Value: !Sub "https://console.aws.amazon.com/cloudwatch/home?region=us-east-1#dashboards:name=${CloudWatchDashboard}"